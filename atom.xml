<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JackChen Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chengquan223.github.io/"/>
  <updated>2017-03-03T08:41:13.000Z</updated>
  <id>http://chengquan223.github.io/</id>
  
  <author>
    <name>JackChen</name>
    <email>309581454@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>canvas动画—圆形扩散、运动轨迹</title>
    <link href="http://chengquan223.github.io/2017/03/02/canvas-flashMarker/"/>
    <id>http://chengquan223.github.io/2017/03/02/canvas-flashMarker/</id>
    <published>2017-03-02T07:39:56.000Z</published>
    <updated>2017-03-03T08:41:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在ECharts中看到过这种圆形扩散效果，类似css3，刚好项目中想把它用上，but我又不想引入整个echart.js文件，更重要的是想弄明白它的原理，所以自己动手。在这篇文章中我们就来分析实现这种效果的两种方法，先上效果图：<br><img src="http://ohhyxbb41.bkt.clouddn.com/images/canvas-circleAnimate.gif" alt="圆形扩散"><br><a id="more"></a></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>通过不断的改变圆的半径大小，不断重叠达到运动的效果，在运动的过程中，设置当前canvas的透明度<code>context.globalAlpha=0.95</code>，使得canvas上的圆逐渐透明直至为0，从而实现这种扩散、渐变的效果。</p>
<h2 id="实现方法一"><a href="#实现方法一" class="headerlink" title="实现方法一"></a>实现方法一</h2><p><em>1. 关键技术点</em><br><code>context.globalAlpha = 0.95</code>; //设置主canvas的绘制透明度。<br>创建临时canvas来缓存主canas的历史图像，再叠加到主canvas上。</p>
<p><em>2. 绘制过程</em><br>首先，我们先来写一个绘制圆的方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//画圆</span></div><div class="line"><span class="keyword">var</span> drawCircle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    context.beginPath();</div><div class="line">    context.arc(<span class="number">150</span>, <span class="number">100</span>, radius, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</div><div class="line">    context.closePath();</div><div class="line">    context.lineWidth = <span class="number">2</span>; <span class="comment">//线条宽度</span></div><div class="line">    context.strokeStyle = <span class="string">'rgba(250,250,50,1)'</span>; <span class="comment">//颜色</span></div><div class="line">    context.stroke();</div><div class="line">    radius += <span class="number">0.5</span>; <span class="comment">//每一帧半径增加0.5</span></div><div class="line"></div><div class="line">    <span class="comment">//半径radius大于30时，重置为0</span></div><div class="line">    <span class="keyword">if</span> (radius &gt; <span class="number">30</span>) &#123;</div><div class="line">        radius = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后，我们创建一个临时canvas用来缓存主canvas上的历史图像，设置主canvas的透明度<code>context.globalAlpha=0.95</code>(关键一步)，在每次调用<code>drawCircle</code>方法绘制一个新圆之前都把主canvas上的图像，也就是之前的图像给绘制到临时的canvas中，等<code>drawCircle</code>方法绘制完新圆后，再把临时canvas的图像绘制回主canvas中。</p>
<p><img src="http://ohhyxbb41.bkt.clouddn.com/images/canvas-flow.png" alt="绘制流程"><br>核心代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个临时canvas来缓存主canvas的历史图像</span></div><div class="line"><span class="keyword">var</span> backCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>),</div><div class="line">    backCtx = backCanvas.getContext(<span class="string">'2d'</span>);</div><div class="line">    backCanvas.width = width;</div><div class="line">    backCanvas.height = height;</div><div class="line"></div><div class="line">    <span class="comment">//设置主canvas的绘制透明度</span></div><div class="line">    context.globalAlpha = <span class="number">0.95</span>;</div><div class="line"></div><div class="line">    <span class="comment">//显示即将绘制的图像，忽略临时canvas中已存在的图像</span></div><div class="line">    backCtx.globalCompositeOperation = <span class="string">'copy'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//1.先将主canvas的图像缓存到临时canvas中</span></div><div class="line">    backCtx.drawImage(canvas, <span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line"></div><div class="line">    <span class="comment">//2.清除主canvas上的图像</span></div><div class="line">    context.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line"></div><div class="line">    <span class="comment">//3.在主canvas上画新圆</span></div><div class="line">    drawCircle();</div><div class="line"></div><div class="line">    <span class="comment">//4.等新圆画完后，再把临时canvas的图像绘制回主canvas中</span></div><div class="line">    context.drawImage(backCanvas, <span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="实现方法二"><a href="#实现方法二" class="headerlink" title="实现方法二"></a>实现方法二</h2><p>与上一种方法相比，这种方法更加简单，同样是用到了透明度逐渐减小直到为0的原理，不同的是这里并没有创建临时canvas，而是运用了<code>context.globalCompositeOperation</code>属性值<code>source-over</code>和<code>destination-in</code>来配合使用，<a href="http://www.w3school.com.cn/tags/canvas_globalcompositeoperation.asp" target="_blank" rel="external">查看globalCompositeOperation属性介绍</a><br>核心代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//默认值为source-over</span></div><div class="line">    <span class="keyword">var</span> prev = context.globalCompositeOperation;</div><div class="line"></div><div class="line">    <span class="comment">//只显示canvas上原图像的重叠部分</span></div><div class="line">    context.globalCompositeOperation = <span class="string">'destination-in'</span>;</div><div class="line"></div><div class="line">    <span class="comment">//设置主canvas的绘制透明度</span></div><div class="line">    context.globalAlpha = <span class="number">0.95</span>;</div><div class="line"></div><div class="line">    <span class="comment">//这一步目的是将canvas上的图像变的透明</span></div><div class="line">    context.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line"></div><div class="line">    <span class="comment">//在原图像上重叠新图像</span></div><div class="line">    context.globalCompositeOperation = prev;</div><div class="line"></div><div class="line">    <span class="comment">//在主canvas上画新圆</span></div><div class="line">    drawCircle();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="地图上的应用"><a href="#地图上的应用" class="headerlink" title="地图上的应用"></a>地图上的应用</h2><p>这里我采用的是第二种方式，将扩散、渐变效果运用到了百度地图上，感觉还比较炫，<a href="https://github.com/chengquan223/map-canvas" target="_blank" rel="external">查看更多demo</a></p>
<p><a href="https://chengquan223.github.io/map-canvas/examples/baidu-map-flashmarker.html">圆形扩散动画</a><br><img src="http://ohhyxbb41.bkt.clouddn.com/images/baidu-map-circleAnimate.gif" alt="百度地图圆形扩散"><br><a href="https://chengquan223.github.io/map-canvas/examples/baidu-map-move.html">运动轨迹动画</a><br><img src="http://ohhyxbb41.bkt.clouddn.com/images/baidu-map-moveLine.gif" alt="百度地图运动轨迹动画"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方法一、二都能实现同样的效果，如果动画绘制、操作canvas比较频繁，建议采用第一种方式，用临时canvas来缓存历史图像，效率更高。<br></p>
<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;在ECharts中看到过这种圆形扩散效果，类似css3，刚好项目中想把它用上，but我又不想引入整个echart.js文件，更重要的是想弄明白它的原理，所以自己动手。在这篇文章中我们就来分析实现这种效果的两种方法，先上效果图：&lt;br&gt;&lt;img src=&quot;http://ohhyxbb41.bkt.clouddn.com/images/canvas-circleAnimate.gif&quot; alt=&quot;圆形扩散&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="canvas" scheme="http://chengquan223.github.io/tags/canvas/"/>
    
      <category term="动画" scheme="http://chengquan223.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="圆" scheme="http://chengquan223.github.io/tags/%E5%9C%86/"/>
    
      <category term="扩散渐变" scheme="http://chengquan223.github.io/tags/%E6%89%A9%E6%95%A3%E6%B8%90%E5%8F%98/"/>
    
      <category term="运动轨迹" scheme="http://chengquan223.github.io/tags/%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9/"/>
    
      <category term="迁徙" scheme="http://chengquan223.github.io/tags/%E8%BF%81%E5%BE%99/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT搭建个人博客</title>
    <link href="http://chengquan223.github.io/2017/03/01/FirstArticle/"/>
    <id>http://chengquan223.github.io/2017/03/01/FirstArticle/</id>
    <published>2017-03-01T02:01:56.000Z</published>
    <updated>2017-03-01T06:08:17.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>前提是必须先安装好 Node.js（这里就不作介绍了）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g</div></pre></td></tr></table></figure></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>如果指定<folder>，便会在这个目录下新建一个名为<folder>的文件夹；否则将在当前目录下初始化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;folder&gt;</div></pre></td></tr></table></figure></folder></folder></p>
<a id="more"></a>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"FirstArticle"</span></div></pre></td></tr></table></figure>
<h2 id="生成静态页面指public目录"><a href="#生成静态页面指public目录" class="headerlink" title="生成静态页面指public目录"></a>生成静态页面指public目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate （或简写为hexo g）</div></pre></td></tr></table></figure>
<h2 id="本地启动服务器"><a href="#本地启动服务器" class="headerlink" title="本地启动服务器"></a>本地启动服务器</h2><p>服务器会跑在<a href="http://localhost:port" target="_blank" rel="external">http://localhost:port</a> （port 预设为 4000，可在 _config.yml 设定）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server （或简写为hexo s）</div></pre></td></tr></table></figure></p>
<h2 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h2><p>我们需要修改站点配置文件_config.yml，如下格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/chengquan223/chengquan223.github.io</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>安装插件hexo-deployer-git，将网站部署到Github<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>执行命令进行部署,浏览器中输入<a href="http://chengquan223.github.io">http://chengquan223.github.io</a> 即可，（github账户名称修改为你的）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>每次部署的步骤。可按照以下三步来进行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>简写成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g <span class="_">-d</span></div></pre></td></tr></table></figure></p>
<h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><p><a href="https://hexo.io/themes/" target="_blank" rel="external">主题列表</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT主题使用文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h2&gt;&lt;p&gt;前提是必须先安装好 Node.js（这里就不作介绍了）&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install hexo -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;p&gt;如果指定&lt;folder&gt;，便会在这个目录下新建一个名为&lt;folder&gt;的文件夹；否则将在当前目录下初始化&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo init &amp;lt;folder&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://chengquan223.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://chengquan223.github.io/tags/NexT/"/>
    
      <category term="github" scheme="http://chengquan223.github.io/tags/github/"/>
    
  </entry>
  
</feed>
